{
  
    
        "post0": {
            "title": "AP classroom questions",
            "content": ".",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2022/10/04/APclassroom1.html",
            "relUrl": "/2022/10/04/APclassroom1.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "fun with dictionaries",
            "content": "f = {&quot;players&quot;:&quot;11 players on the field&quot;, &quot;lineman&quot;: &quot;The smartest players on the field&quot;, &quot;quarterback&quot;: &quot;The dude who throws the ball&quot; &quot;linebacker&quot;: &quot;They bliz a lot&quot; } print(f[input(&quot;query?&quot;)]) # This could probably be expanded more. But it doesn&#39;t include interation which the assignment requires. . The smartest players on the field . players = [] players.append({ &quot;name&quot;: &quot;Khalid Farah&quot;, &quot;weight&quot;: 195, #Weight is in pounds &quot;positions&quot;: [&quot;linebacker&quot;] }) players.append({ &quot;name&quot;: &quot;Jeffrey Fonseca&quot;, &quot;weight&quot;: 200, &quot;positions&quot;: [&quot;Offensive lineman&quot;, &quot;Defensive Lineman&quot;] }) for p in players: print(p[&quot;name&quot;], &quot; n&quot;) # technically, this is all I need to complete the assignment. However, I may do more. . Khalid Farah Jeffrey Fonseca . a = input(&quot;Which player&#39;s stats do you want?&quot;) for p in players: if p[&quot;name&quot;] == a: print(&quot;weight = &quot;,p[&quot;weight&quot;],&quot;pounds n&quot;) print(&quot;Positions played:&quot;, p[&quot;positions&quot;]) . weight = 195 pounds Positions played: [&#39;linebacker&#39;] . dict = {} dict.update({&quot;test&quot;:&quot;value&quot;}) print(dict) # finally got this working. Why was this so difficult to figure out. . {&#39;test&#39;: &#39;value&#39;} . pindex = {} for p in players: pindex.update({p[&quot;name&quot;]: p}) print(pindex) # This program creates an index for the list,to make searching faster. . {&#39;Khalid Farah&#39;: {&#39;name&#39;: &#39;Khalid Farah&#39;, &#39;weight&#39;: 195, &#39;positions&#39;: [&#39;linebacker&#39;]}, &#39;Jeffrey Fonseca&#39;: {&#39;name&#39;: &#39;Jeffrey Fonseca&#39;, &#39;weight&#39;: 200, &#39;positions&#39;: [&#39;Offensive lineman&#39;, &#39;Defensive Lineman&#39;]}} . # Right now there is no speed difference, but when working with bigger stores of info, for loops through are tedious a = input(&quot;player name?&quot;) print(&quot;weight=&quot;,pindex[a][&quot;weight&quot;],&quot;pounds n&quot;) print(&quot;positions=&quot;,pindex[a][&quot;positions&quot;]) # maybe creating dictionary of dictionaries would have been easier... . weight= 200 pounds positions= [&#39;Offensive lineman&#39;, &#39;Defensive Lineman&#39;] .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/collegeboard/2022/10/03/Dictionaries.html",
            "relUrl": "/collegeboard/2022/10/03/Dictionaries.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Setting up cockpit",
            "content": "What is cockpit (and similar softwares) . Amazon lets us have free servers via EC2. The typical way to manage servers is either by sshing in, or using the cloud shell that Amazon (and Oracle) give. However, there are alternative ways to manage servers. One extremely popular example is pteradactyl, a webpage based gui to manage game (usually minecraft). It lets you download game servers as docker containers, run them, stop them, and maybe manage some basic settings, All the things a casual who just wants video games may need. But when I created a free Oracle server, I wanted something more. By this point, I was an experienced linux user, and I wanted more advanced features. So I searched for a more advanced server management tool, like people use on real servers, and I found cockpit. . Cockpit comes with many benefits. The two things I really like however, are that it’s terminal is not laggy at all, unlike the amazon ec2 cloud terminal, and it also offers a gui to manage docker containers. . The installation process . The installation process is simple: . sudo apt install cockpit . To start the server, run: . sudo systemctl enable --now cockpit . This sets the cockpit server to start on boot, and it starts it now. . However, the firewall must open ports to allow the cockpit server through. This opens the default ports for the cockpit server. It should be noted that not every version fo linux uses ufw as a firewall, some use other firewalls with different management commands. . sudo ufw allow 9090 . Another important thing is to set the password for the default “ubuntu” user account so that you can login to cockpit. . sudo passwd ubuntu . It will ask for the new password twice, not showing what you are typing. . Reboot the computer for the server to start properly, however, this won’t work as the virtual private cloud must have its ports open. I had to do this when I set up cockpit on my Oracle server, so I knew the gist of the steps. . Opening EC2’s VPC ports (Also necessary if you want to host servers on ports other than 22, 80, or 443) . First, go to your EC2 vps, where you would normally click connect from, and click on the link under vpc: . . This should bring you up to a screen like this: . . Click the security tab, bringing you to a screen like this: . . And then click on security groups, bringing you to a screen like this: . . And then click on the “edit inbound rules” . Finally, you should get something like this: . . Add an item that matches what I have in the third row. That opens the port to allow cockpits server to escape. You may also need to use this page to open other ports if you are hosting servers on nonstandard ports. .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2022/09/30/cockpitsetup.html",
            "relUrl": "/2022/09/30/cockpitsetup.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "toc: true | title: Messing Around with Javascript | comments: true | . Javascipt is another programming language. Just like python, it has variables, functions, iterations, just sometimes in different forms. . // Javascript works with arrays rather than lists. They are basically the same thing, besides the name. var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) . // json is a file format used to transport data from one program to another, even if those programs are in different languages. // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2022/09/28/Javascript-tutorial.html",
            "relUrl": "/2022/09/28/Javascript-tutorial.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Making A Quiz In App Lab",
            "content": "Making a quiz in app lab . var questions = [&quot;How many players?&quot;]; var answers = [&quot;11&quot;]; var boxes = [([&quot;13&quot;, &quot;12&quot;, &quot;15&quot;, &quot;11&quot;])]; var grade = 0; setText(&quot;question&quot;, questions[0]); setText(&quot;a0&quot;, boxes[0][0]); setText(&quot;a1&quot;, boxes[0][1]); setText(&quot;a2&quot;, boxes[0][2]); setText(&quot;a3&quot;, boxes[0][3]); onEvent(&quot;a0&quot;, &quot;click&quot;, function( ) { if (getText(&quot;a0&quot;) == answers[0]) { console.log(&quot;correct&quot;); } }); onEvent(&quot;a1&quot;, &quot;click&quot;, function( ) { if (getText(&quot;a1&quot;) == answers[0]) { console.log(&quot;correct&quot;); } }); onEvent(&quot;a2&quot;, &quot;click&quot;, function( ) { if (getText(&quot;a2&quot;) == answers[0]) { console.log(&quot;correct&quot;); } }); onEvent(&quot;a3&quot;, &quot;click&quot;, function( ) { if (getText(&quot;a3&quot;) == answers[0]) { console.log(&quot;correct&quot;); } }); . This was a working sample of code. I used this to try to test this, and to design the program, with the ultimate goal of making an theoretically infinite quiz that got questions, answers, and correct answers, from a list. . The variables (lists) I used are an example of data abstraction. My goal was to create multiple lists that can be fed to the program. . However, I later hit a road block. I put the working blocks of code in a for loop, but it did not iterate through. For some reason, the onEvent function does not make the for loop iterate through. . I tried to move the events outside the loop, but those did not iterate through as well. . I’m going to redesign this with a while loop, that changes after onEvent is clicked. . However, this was too tedious. I collapsed this down into a function. . function checkAnswer(b) { if (getText(b) == answers[i]) { console.log(&quot;correct&quot;); grade++; i++; } else { console.log(&quot;incorrect&quot;); i++; } setQuestions(); . The setQuestions function does exactly that, set questions according to the list,using the variable i pick from the lists. Whenever a button is clicked, this function is called and the answer is checked, the variable grade is changed, and the new questions are set. This is an example of procedural abstraction. The question setting is one function, and the answer checking is another. .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2022/09/12/Applabquiz.html",
            "relUrl": "/2022/09/12/Applabquiz.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "fun with dictionaries",
            "content": "f = {&quot;players&quot;:&quot;11 players on the field&quot;, &quot;lineman&quot;: &quot;The smartest players on the field&quot;, &quot;quarterback&quot;: &quot;The dude who throws the ball&quot; &quot;linebacker&quot;: &quot;They bliz a lot&quot; } print(f[input(&quot;query?&quot;)]) # This could probably be expanded more. But it doesn&#39;t include interation which the assignment requires. . The smartest players on the field . players = [] players.append({ &quot;name&quot;: &quot;Khalid Farah&quot;, &quot;weight&quot;: 195, #Weight is in pounds &quot;positions&quot;: [&quot;linebacker&quot;] }) players.append({ &quot;name&quot;: &quot;Jeffrey Fonseca&quot;, &quot;weight&quot;: 200, &quot;positions&quot;: [&quot;Offensive lineman&quot;, &quot;Defensive Lineman&quot;] }) for p in players: print(p[&quot;name&quot;], &quot; n&quot;) # technically, this is all I need to complete the assignment. However, I may do more. . Khalid Farah Jeffrey Fonseca . a = input(&quot;Which player&#39;s stats do you want?&quot;) for p in players: if p[&quot;name&quot;] == a: print(&quot;weight = &quot;,p[&quot;weight&quot;],&quot;pounds n&quot;) print(&quot;Positions played:&quot;, p[&quot;positions&quot;]) . weight = 195 pounds Positions played: [&#39;linebacker&#39;] . dict = {} dict.update({&quot;test&quot;:&quot;value&quot;}) print(dict) # finally got this working. Why was this so difficult to figure out. . {&#39;test&#39;: &#39;value&#39;} . pindex = {} for p in players: pindex.update({p[&quot;name&quot;]: p}) print(pindex) # This program creates an index for the list,to make searching faster. . {&#39;Khalid Farah&#39;: {&#39;name&#39;: &#39;Khalid Farah&#39;, &#39;weight&#39;: 195, &#39;positions&#39;: [&#39;linebacker&#39;]}, &#39;Jeffrey Fonseca&#39;: {&#39;name&#39;: &#39;Jeffrey Fonseca&#39;, &#39;weight&#39;: 200, &#39;positions&#39;: [&#39;Offensive lineman&#39;, &#39;Defensive Lineman&#39;]}} . # Right now there is no speed difference, but when working with bigger stores of info, for loops through are tedious a = input(&quot;player name?&quot;) print(&quot;weight=&quot;,pindex[a][&quot;weight&quot;],&quot;pounds n&quot;) print(&quot;positions=&quot;,pindex[a][&quot;positions&quot;]) # maybe creating dictionary of dictionaries would have been easier... . weight= 200 pounds positions= [&#39;Offensive lineman&#39;, &#39;Defensive Lineman&#39;] .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/collegeboard/2022/09/07/Dictionaries.html",
            "relUrl": "/collegeboard/2022/09/07/Dictionaries.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Dark mode",
            "content": ". toc: true layout: post description: image categories: [markdown] title: Proof of dark mode . .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2022/09/07/Dark-Mode.html",
            "relUrl": "/2022/09/07/Dark-Mode.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Tuximage",
            "content": ". toc: true layout: post description: image categories: [markdown] title: image test . .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2022/08/29/tuximage.html",
            "relUrl": "/2022/08/29/tuximage.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Football Quiz",
            "content": "Code . questions = [&quot;Is Jeffrey the smartest person alive&quot;] answers = [&quot;yes&quot;] grade = 0 a = 0 for q in questions: answer = input(q) if answer == answers[a]: print(&quot;you are very smart&quot;) grade += 1 else: print(&quot;you are dumb&quot;) a += 1 print(grade,&quot;/&quot;, len(questions)) . you are very smart 1 / 1 . Explanation . My code is much simpler than the example given. By using what is called a for loop, I can repeat the same actions or lines of code (with different inputs) allowing me to have to not type as much. The other thing I am taking advantage of is a list. In python, a list is basically a way to store multiple values. . The syntax of a for loop is for i in j . i is a variable, one which starts at 0 and gets added to until it reaches j. The program runs what is in the for function once, then adds to i, and then repeats until i reaches j. For loops exist in lots of programming languages. . However, I did something special. I created a list called questions, which can store as many questions as I want. I also created a list called answers, which stores anwsers. The for q in questions doesn&#39;t just behave like a normal for loop, the q is not a variable, but rather an item in the list. The function goes through the list with different items. . In addition to that, I set a variable called a. a is used to call on a specific item in the list answers, one that matches the question. By adding 1 to a at the end of the for loop, I can make sure the item called from questions matches with that of answers. . Because of my genius intelligence, I was able to create quiz, that is infinitely extendable. You simply add more items to the list of questions and answers, and more questions and answers will be added. No programming necessary. In addition to that, it also gives a fraction score. . questions = [[&quot;Is Jeffrey the Smartest person alive&quot;, &quot;yes&quot;], [&quot;How many players are there on a football team?&quot;, &quot;11&quot;]] grade = 0 for q in questions: a = input(q[0]) if a == q[1]: print(&quot;Correct&quot;) grade +=1 else: print(&quot;Incorrect&quot;) print(&quot;%&quot;,(grade / len(questions) * 100)) . Correct Correct % 100.0 .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/collegeboard/2022/08/26/pythonquiz.html",
            "relUrl": "/collegeboard/2022/08/26/pythonquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Bash toolcheck",
            "content": "Check for vscode being installed properly . code --version . 1.70.24l e4503b30fc78200f846c62cf8091b76ff5547662 x64 . . Check for conda . conda --version . conda 4.13.0 . . conda --list . usage: conda [-h] [-V] command ... conda: error: the following arguments are required: command Note: you may need to restart the kernel to use updated packages. . jupyter kernelspec list . Available kernels: bash /home/moonpie/.local/share/jupyter/kernels/bash javascript /home/moonpie/.local/share/jupyter/kernels/javascript python3 /home/moonpie/.local/share/jupyter/kernels/python3 . . python --version # python 3 version . Python 3.10.6 . . python2 --version # python 2 version . Python 2.7.18 . .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/collegeboard/2022/08/22/toolcheck.html",
            "relUrl": "/collegeboard/2022/08/22/toolcheck.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "print(&quot;Hello Nice&quot;) .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2020/07/27/hello-world.html",
            "relUrl": "/2020/07/27/hello-world.html",
            "date": " • Jul 27, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "My First Post",
            "content": "HELLO WORLD .",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/2020/01/28/My-First-Post.html",
            "relUrl": "/2020/01/28/My-First-Post.html",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://moonpiedumplings.github.io/fastpages-test2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://moonpiedumplings.github.io/fastpages-test2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://moonpiedumplings.github.io/fastpages-test2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}